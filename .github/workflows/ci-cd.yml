name: Build, Test & Publish NuGet

on:
  push:
    branches:
      - main
      - dev
      - dev-0.2.0
  pull_request:
    branches:
      - main

jobs:
  versioning:
    name: 版本管理和标签
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      new_version: ${{ steps.format_version.outputs.version }}
    steps:
      - name: 🚀 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 根据 commit 规范生成版本
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          tag_prefix: "v"
          release_branches: main,dev
          major_pattern: "(BREAKING CHANGE|major)"
          minor_pattern: "feat:"
          patch_pattern: "(fix|docs|style|refactor|perf|test|ci|build|chore):"

      - name: 🧐 显示版本信息
        run: |
          echo "上一个标签: ${{ steps.tag_version.outputs.previous_tag }}"
          echo "新标签: ${{ steps.tag_version.outputs.new_tag }}"

      - name: 📝 格式化版本号（去掉 v 前缀）
        id: format_version
        run: |
          TAG="${{ steps.tag_version.outputs.new_tag }}"
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "✅ 设置版本为: $VERSION"

  update-csproj:
    name: 更新 .csproj 版本
    needs: versioning
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: 替换 csproj 中的版本号
        run: |
          VERSION="${{ needs.versioning.outputs.new_version }}"
          find . -name "*.csproj" -type f -exec sed -i "s/<Version>[^<]*<\/Version>/<Version>$VERSION<\/Version>/g" {} \;

      - name: 提交版本号更改
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: 更新版本号为 ${{ needs.versioning.outputs.new_version }} [skip ci]"
          file_pattern: "*.csproj"
          branch: ${{ github.ref_name }}
          commit_user_name: GitHub Actions Bot
          commit_user_email: github-actions[bot]@users.noreply.github.com

  build-and-test:
    name: 构建并测试
    needs: [versioning, update-csproj]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: 拉取最新版本变更
        run: git pull origin ${{ github.ref_name }}

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: 创建 NuGet 配置（包含 nuget.org 官方源）
        run: |
          cat <<EOF > ./nuget.config
          <configuration>
            <packageSources>
              <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
            </packageSources>
          </configuration>
          EOF

      - name: 恢复依赖（dotnet restore）
        run: |
          echo "📦 执行 restore..."
          dotnet restore ./xmi-schema-Csharp.Core.csproj --configfile ./nuget.config -p:RestoreFallbackFolders=""

      - name: 检查是否成功生成 project.assets.json
        run: |
          echo "🔍 检查 obj/project.assets.json 是否存在..."
          if [ ! -f ./obj/project.assets.json ]; then
            echo "❌ 错误：obj/project.assets.json 未生成，说明 restore 失败"
            exit 1
          else
            echo "✅ 成功：obj/project.assets.json 已生成"
          fi

      - name: 构建项目
        run: dotnet build ./xmi-schema-Csharp.Core.csproj --configuration Release --no-restore --configfile ./nuget.config -p:RestoreFallbackFolders=""

      - name: 运行测试
        run: dotnet test ./xmi-schema-Csharp.Core.csproj --configuration Release --no-build --logger trx -p:RestoreFallbackFolders=""

  publish-nuget:
    name: 发布到 NuGet
    needs: [versioning, update-csproj, build-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: 拉取最新版本变更
        run: git pull origin ${{ github.ref_name }}

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: 创建 NuGet 配置（包含 nuget.org 官方源）
        run: |
          cat <<EOF > ./nuget.config
          <configuration>
            <packageSources>
              <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
            </packageSources>
          </configuration>
          EOF

      - name: 恢复依赖（重新 restore）
        run: |
          echo "📦 发布阶段执行 restore..."
          dotnet restore ./xmi-schema-Csharp.Core.csproj --configfile ./nuget.config -p:RestoreFallbackFolders=""

      - name: 检查是否成功生成 project.assets.json
        run: |
          echo "🔍 检查 obj/project.assets.json 是否存在..."
          if [ ! -f ./obj/project.assets.json ]; then
            echo "❌ 错误：obj/project.assets.json 未生成，说明 restore 失败"
            exit 1
          else
            echo "✅ 成功：obj/project.assets.json 已生成"
          fi

      - name: 打包 NuGet（显式版本）
        run: |
          VERSION="${{ needs.versioning.outputs.new_version }}"
          dotnet pack ./xmi-schema-Csharp.Core.csproj \
            --configuration Release \
            --output ./packages \
            --configfile ./nuget.config \
            /p:PackageVersion=$VERSION -p:RestoreFallbackFolders=""

      - name: 显示 NuGet 包
        run: ls -R ./packages

      - name: 发布到 NuGet 包
        run: |
          PACKAGE=$(find packages -name "*.nupkg" | head -n 1)
          if [ -z "$PACKAGE" ]; then
            echo "❌ 没有找到 NuGet 包"
            exit 1
          fi
          echo "✅ 正在发布: $PACKAGE"
          dotnet nuget push "$PACKAGE" -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json --skip-duplicate
